import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { FilterProductCodePipe } from './filter-product-code.pipe'; // ƒê∆∞·ªùng d·∫´n ƒë√∫ng nh√©


@Component({
  selector: 'app-duyetphieunhap',
  standalone: true,
  imports: [CommonModule, FormsModule,  FilterProductCodePipe],
  templateUrl: './duyetphieunhap.component.html',
  styleUrls: ['./duyetphieunhap.component.css']
})
export class DuyetphieunhapComponent implements OnInit {
  danhSachPhieu: any[] = [];
  selectedPhieu: any = null;
  popupNhapKhoMo: boolean = false;
  danhSachSanPhamNhap: any[] = [];
  filterCode: string = '';
  danhSachKhuVuc: any[] = [];
  danhSachMaTrung: string[] | null = null; // null: ch∆∞a ki·ªÉm tra, []: kh√¥ng tr√πng, ['A1']...
  

  //b·ªô l·ªçc
  filter = {
  keyword: '',
  ngayBatDau: '',
  ngayKetThuc: '',
  trangThai: ''
  };

  danhSachPhieuGoc: any[] = []; // d·ªØ li·ªáu g·ªëc t·ª´ API

  maCanKiemTra: string = '';
  ketQuaSanPham: any = null;

  // L·∫•y th√¥ng tin ng∆∞·ªùi duy·ªát (admin hi·ªán t·∫°i)
  adminName = sessionStorage.getItem('name') || '';
  adminEmail = sessionStorage.getItem('email') || '';

  // Ph·∫£n h·ªìi h·ªá th·ªëng nh·∫≠p v√†o
  phanHoiHeThong: string = '';

  popupChonViTriMo: boolean = false;
  sanPhamDangChon: any = null;
  danhSachPallet: any[] = [];
  palletGridPopup: any[][] = [];

  phanBoCanConLai = 0;
  palletsDaChon: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadPhieu();
  }

  loadPhieu() {
    this.http.get<any[]>('http://localhost:3000/api/phieu-nhap').subscribe(data => {
      this.danhSachPhieuGoc = data;
      this.locPhieu(); // G·ªçi h√†m l·ªçc ngay sau khi load
    });
  }

  locPhieu() {
    const { keyword, ngayBatDau, ngayKetThuc, trangThai } = this.filter;

    this.danhSachPhieu = this.danhSachPhieuGoc.filter(p => {
      const matchKeyword =
        !keyword ||
        p.receipt_code.toLowerCase().includes(keyword.toLowerCase()) ||
        p.supplier_name.toLowerCase().includes(keyword.toLowerCase());

      const matchNgayBatDau = !ngayBatDau || new Date(p.created_date) >= new Date(ngayBatDau);
      const matchNgayKetThuc = !ngayKetThuc || new Date(p.created_date) <= new Date(ngayKetThuc);

      const matchTrangThai = !trangThai || p.trang_thai === trangThai;

      return matchKeyword && matchNgayBatDau && matchNgayKetThuc && matchTrangThai;
    });
  }


  kiemTraTrongKho() {
    if (!this.maCanKiemTra) {
      this.ketQuaSanPham = null;
      return;
    }

    this.http.get<any>(`http://localhost:3000/api/products-detail/check-ma/${this.maCanKiemTra}`).subscribe(res => {
      if (res.exists) {
        this.ketQuaSanPham = res.product;
      } else {
        this.ketQuaSanPham = {};
      }
    }, err => {
      console.error('L·ªói ki·ªÉm tra s·∫£n ph·∫©m:', err);
      this.ketQuaSanPham = {};
    });
  }

  capNhatThanhTien(sp: any) {
    const unitPrice = Number(sp.unit_price) || 0;
    const quantity = Number(sp.quantity ?? 1); // n·∫øu undefined th√¨ m·∫∑c ƒë·ªãnh l√† 1
    sp.total_price = unitPrice * quantity;
    this.capNhatTongTien();
  }

  capNhatTongTien() {
    let total = 0;
    for (let sp of this.danhSachSanPhamNhap) {
      total += sp.total_price || 0;
    }
    if (this.selectedPhieu) {
      this.selectedPhieu.total_amount = total;
    }
  }

  xemChiTiet(phieu: any) {
    this.selectedPhieu = phieu;
    this.phanHoiHeThong = phieu.note_admin || ''; // L·∫•y ph·∫£n h·ªìi h·ªá th·ªëng n·∫øu c√≥
  }

  dongChiTiet() {
    this.selectedPhieu = null;
    this.phanHoiHeThong = '';
  }

  hoanTatKiemTra() {
    const newStatus = 'ƒê√£ duy·ªát';

    this.http.put(`http://localhost:3000/api/phieu-nhap/${this.selectedPhieu.id}/admin-cap-nhat`, {
      trang_thai: newStatus,
      note_admin: this.phanHoiHeThong,
      admin_account_email: this.adminEmail,
      admin_account_name: this.adminName
    }).subscribe(() => {
      alert('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!');
      // C·∫≠p nh·∫≠t l·∫°i tr√™n UI
      this.selectedPhieu.trang_thai = newStatus;
      this.selectedPhieu.note_admin = this.phanHoiHeThong;
      this.selectedPhieu.admin_account_email = this.adminEmail;
      this.selectedPhieu.admin_account_name = this.adminName;
    });
    console.log({
      id: this.selectedPhieu.id,
      trang_thai: newStatus,
      note_admin: this.phanHoiHeThong,
      admin_account_email: this.adminEmail,
      admin_account_name: this.adminName
    });
    window.location.reload();

  }

  // G·ªçi API ƒë·ªÉ m·ªü popup x√°c nh·∫≠n
  moPopupNhapKho() {
    console.log('üì¢ ƒê√£ g·ªçi m·ªü popup');
    this.popupNhapKhoMo = true;

    // L·∫•y danh s√°ch s·∫£n ph·∫©m c·ªßa phi·∫øu nh·∫≠p
    this.http.get<any[]>(`http://localhost:3000/api/phieu-nhap/${this.selectedPhieu.id}/san-pham`)
      .subscribe(data => {
        this.danhSachSanPhamNhap = data.map(sp => ({
          ...sp,
          old_product_code: sp.product_code, // üëà l∆∞u m√£ c≈©
          trung_ma: false,
          // ƒê·ªãnh d·∫°ng l·∫°i ng√†y ƒë·ªÉ ph√π h·ª£p v·ªõi input type="date"
          manufacture_date: sp.manufacture_date ? sp.manufacture_date.slice(0, 10) : '',
          expiry_date: sp.expiry_date ? sp.expiry_date.slice(0, 10) : ''
        }));
      }, err => {
        console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m phi·∫øu:', err);
      });

    // L·∫•y danh s√°ch khu v·ª±c kho
    this.http.get<any[]>('http://localhost:3000/api/khu-vuc')
      .subscribe(data => {
        this.danhSachKhuVuc = data;
      }, err => {
        console.error('‚ùå L·ªói khi l·∫•y khu v·ª±c:', err);
      });
  }

  // ƒê√≥ng popup
  dongPopup() {
    this.popupNhapKhoMo = false;
    this.danhSachSanPhamNhap = [];
  }

  kiemTraTrungMa(sp: any) {
    if (!sp.product_code) {
      sp.trung_ma = false;
      return;
    }

    this.http.get<any>(`http://localhost:3000/api/products-detail/check-ma/${sp.product_code}`)
      .subscribe(data => {
        sp.trung_ma = data.exists; // ‚úÖ G√°n ch√≠nh x√°c
      }, error => {
        sp.trung_ma = false;
      });
  }

  // X√°c nh·∫≠n nh·∫≠p kho ch√≠nh th·ª©c
  xacNhanNhapKhoChinhThuc() {
  const maSanPham = this.danhSachSanPhamNhap.map(sp => sp.product_code);

  this.http.post<any>('http://localhost:3000/api/products-detail/check-multiple', {
    ma_san_pham: maSanPham
  }).subscribe(result => {
    this.danhSachMaTrung = result.duplicates || [];

    if (this.danhSachMaTrung !== null && this.danhSachMaTrung.length > 0) {
      alert(`‚ùå Kh√¥ng th·ªÉ nh·∫≠p kho! M√£ tr√πng: ${this.danhSachMaTrung.join(', ')}`);
      return;
    }

    // ‚úÖ Chu·∫©n b·ªã danh s√°ch g·ª≠i ƒëi (chia theo t·ª´ng pallet)
    const danhSachOK: any[] = [];

    for (let sp of this.danhSachSanPhamNhap) {
      const base = {
        product_code: sp.product_code,
        product_name: sp.product_name,
        product_type: sp.product_type,
        image_url: sp.image_url,
        unit: sp.unit,
        quantity: sp.quantity,
        unit_price: sp.unit_price,
        total_price: sp.total_price,
        manufacture_date: sp.manufacture_date,
        expiry_date: sp.expiry_date,
        supplier_name: this.selectedPhieu.supplier_name,
        logo_url: this.selectedPhieu.logo_url,
        old_product_code: sp.old_product_code || sp.product_code,
        receipt_code: this.selectedPhieu.receipt_code
      };

      const pallets = sp.ds_pallet || [];
      const soPallet = pallets.length || 1;
      const weightPer = sp.weight / soPallet;
      const areaPer = sp.area / soPallet;

      if (soPallet > 0) {
        for (const p of pallets) {
          danhSachOK.push({
            ...base,
            location: p.name,
            khu_vuc_id: sp.khu_vuc_id,
            weight: p.added_weight || weightPer,
            quantity: p.added_quantity, // ‚úÖ PH·∫¢I C√ì d√≤ng n√†y: s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng v·ªõi kh·ªëi l∆∞·ª£ng chia
            area: p.added_area || areaPer
          });
        }
      } else {
        danhSachOK.push({
          ...base,
          location: sp.location,
          khu_vuc_id: sp.khu_vuc_id,
          weight: sp.weight,
          area: sp.area
        });
      }
    }

    // ‚ùå Ki·ªÉm tra thi·∫øu th√¥ng tin
    const isMissing = danhSachOK.some(sp =>
      !sp.product_code || !sp.product_name || !sp.product_type || !sp.unit ||
      !sp.unit_price || !sp.quantity || !sp.khu_vuc_id || !sp.location
    );

    if (isMissing) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin cho t·∫•t c·∫£ s·∫£n ph·∫©m!");
      return;
    }

    // ‚úÖ G·ª≠i v√†o API nh·∫≠p kho
    this.http.post('http://localhost:3000/api/nhap-kho', {
      phieu_id: this.selectedPhieu.id,
      danh_sach_san_pham: danhSachOK
    }).subscribe(() => {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      this.http.put(`http://localhost:3000/api/phieu-nhap/${this.selectedPhieu.id}/hoan-tat`, {
        trang_thai: 'ƒê√£ nh·∫≠p h√†ng v√†o kho'
      }).subscribe(() => {
        alert('üì¶ Nh·∫≠p kho th√†nh c√¥ng!');
        this.popupNhapKhoMo = false;
        this.loadPhieu();
        this.selectedPhieu = null;
        this.danhSachMaTrung = null;
      });
    }, err => {
      alert('‚ùå L·ªói khi l∆∞u h√†ng!');
      console.error(err);
    });
  }, err => {
    alert('‚ùå L·ªói khi ki·ªÉm tra m√£ tr√πng!');
    console.error(err);
  });
}


  onFileSelected(event: any, sp: any) {
    const file = event.target.files[0];
    if (file) {
      const formData = new FormData();
      formData.append('image', file);

      this.http.post<any>('http://localhost:3000/api/upload', formData).subscribe(res => {
        sp.image_url = res.imageUrl; // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh m·ªõi
      });
    }
  }

/* M·ªõi  */
moPopupChonViTri(sp: any) {
  if (!sp.khu_vuc_id) {
    alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn khu v·ª±c tr∆∞·ªõc khi ph√¢n b·ªï v·ªã tr√≠ pallet!');
    return;
  }

  this.sanPhamDangChon = sp;
  this.phanBoCanConLai = sp.weight; // ho·∫∑c t√≠nh to√°n theo nhu c·∫ßu
  this.palletsDaChon = [];

  this.layPalletTheoKhu(sp.khu_vuc_id);  // ‚úÖ Ch·ªâ g·ªçi khi ch·∫Øc ch·∫Øn c√≥ khu_vuc_id
  this.popupChonViTriMo = true;
}

layPalletTheoKhu(khuVucId: number) {
  this.http.get<any[]>(`http://localhost:3000/api/kho/area/${khuVucId}`).subscribe({
    next: data => {
      // Reset tr∆∞·ªõc
      this.danhSachPallet = data;

      // üîÅ Duy·ªát t·∫•t c·∫£ s·∫£n ph·∫©m nh·∫≠p
      for (const sp of this.danhSachSanPhamNhap) {
        if (sp.ds_pallet && sp.khu_vuc_id === khuVucId) {
          for (const p of sp.ds_pallet) {
            const pallet = data.find(x => x.name === p.name);
            if (pallet) {
              pallet.weightUsed += p.added_weight; // ‚úÖ c·ªông th√™m
            }
          }
        }
      }

      // Chia l·∫°i th√†nh 10x10
      this.palletGridPopup = [];
      for (let i = 0; i < 100; i += 10) {
        this.palletGridPopup.push(data.slice(i, i + 10));
      }
    },
    error: err => console.error('‚ùå L·ªói khi l·∫•y pallet:', err)
  });
}

chonPallet(pallet: any) {
  if (!this.sanPhamDangChon.ds_pallet) {
    this.sanPhamDangChon.ds_pallet = [];
  }

  const palletDaChonIndex = this.sanPhamDangChon.ds_pallet.findIndex(
    (p: any) => p.name === pallet.name
  );

  // üëâ N·∫øu ƒë√£ ch·ªçn tr∆∞·ªõc, th√¨ b·ªè ch·ªçn
  if (palletDaChonIndex !== -1) {
    const daThem = this.sanPhamDangChon.ds_pallet[palletDaChonIndex];
    pallet.weightUsed -= daThem.added_weight;
    this.sanPhamDangChon.ds_pallet.splice(palletDaChonIndex, 1);
    return;
  }

  const weightPerUnit = this.sanPhamDangChon.weight / this.sanPhamDangChon.quantity; // kg/th√πng
  const quantityConLai = this.sanPhamDangChon.quantity - this.sanPhamDangChon.ds_pallet.reduce(
    (sum: number, p: { added_quantity: number }) => sum + p.added_quantity,
    0
  );

  const palletTrongKg = 500 - pallet.weightUsed;
  const quantityCoTheThem = Math.min(
    quantityConLai,
    Math.floor(palletTrongKg / weightPerUnit)
  );

  if (quantityCoTheThem <= 0) {
    alert('‚ùå Pallet kh√¥ng ƒë·ªß ch·ªó ho·∫∑c ƒë√£ ph√¢n h·∫øt s·ªë l∆∞·ª£ng!');
    return;
  }

  const weightThem = quantityCoTheThem * weightPerUnit;

  this.sanPhamDangChon.ds_pallet.push({
    name: pallet.name,
    added_quantity: quantityCoTheThem,
    added_weight: weightThem
  });

  pallet.weightUsed += weightThem;
}

xacNhanViTriHang() {
  const daChon: { name: string; added_weight: number; added_quantity: number }[] = this.sanPhamDangChon.ds_pallet || [];

  const tongKL = daChon.reduce((sum: number, p: { added_weight: number }) => sum + p.added_weight, 0);
  const tongSL = daChon.reduce((sum: number, p: { added_quantity: number }) => sum + p.added_quantity, 0);

  const requiredKL = this.sanPhamDangChon.weight;
  const requiredSL = this.sanPhamDangChon.quantity;
  const epsilon = 0.01;

  if (Math.abs(tongKL - requiredKL) > epsilon || tongSL !== requiredSL) {
    alert(`‚ùå Thi·∫øu th√¥ng tin:
- Kh·ªëi l∆∞·ª£ng ƒë√£ ph√¢n: ${tongKL.toFixed(2)} / ${requiredKL} kg
- S·ªë l∆∞·ª£ng ƒë√£ ph√¢n: ${tongSL} / ${requiredSL} th√πng`);
    return;
  }

  this.sanPhamDangChon.location = daChon.map((p: { name: string }) => p.name).join(', ');
  alert('‚úÖ ƒê√£ x√°c nh·∫≠n v·ªã tr√≠ ƒë·ªÉ h√†ng!');
  this.popupChonViTriMo = false;
}


laPalletDangChon(pallet: { name: string }): boolean {
  if (!this.sanPhamDangChon?.ds_pallet) return false;
  return this.sanPhamDangChon.ds_pallet.some((p: { name: string }) => p.name === pallet.name);
}


}
